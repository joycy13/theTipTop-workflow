version: '3'
networks: 
  private:
    name: private
  web:
    name: web

  
  
    
services:
  traefik:
    container_name: traefik
    restart: always
    image: traefik:v2.4.2
    ports:
      - 443:443
      - 80:80
    command:
      - --api=true
      - --api.dashboard=true
      - "--log.level=INFO"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - --providers.docker.watch=true
      - --providers.docker.network=web
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      #### https ####
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.lets-encr.acme.httpchallenge=true
      - --certificatesresolvers.lets-encr.acme.email=elmalehjoyce+acme@gmail.com
      - --certificatesresolvers.lets-encr.acme.storage=acme.json
      - --certificatesresolvers.lets-encr.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.lets-encr.acme.httpchallenge=true
      - --metrics.prometheus=true
      - --metrics.prometheus.buckets=0.1,0.3,1.2,5.0
      
    labels:
      - traefik.enable=true
       ## HTTPS CHALLENGE
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - traefik.http.routers.traefik.rule=Host(`traefik.dsp4-5archio19-ah-je-gh-yb.fr`)
      - traefik.http.services.traefik.loadbalancer.server.port=8080
      - "traefik.http.routers.traefik.tls.certresolver=lets-encr"
      
       ## HTTP REDIRECT
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.redirect-https.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.redirect-https.entrypoints=web"
      - "traefik.http.routers.redirect-https.middlewares=redirect-to-https"
      
      
      - "traefik.http.middlewares.corsheaders.headers.accesscontrolallowmethods=GET,OPTIONS,PUT,POST,DELETE"
      - "traefik.http.middlewares.corsheaders.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.corsheaders.headers.accessControlAllowHeaders=*"  
      - "traefik.http.middlewares.corsheaders.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.corsheaders.headers.addvaryheader=true"
  
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./acme.json:/acme.json
    networks: 
      - web
      - private
      
     
#---------------------
# gogs-db
#---------------------      
  gogs-db:
    image: postgres:13-alpine
    container_name: gogs-db
    volumes: 
      - ./data/gogs/postgres:/var/lib/postgresql/data
    networks: 
      - private
    environment: 
      - POSTGRES_DB=gogs
      - POSTGRES_USER=gogs
      - POSTGRES_PASSWORD=gogs
    restart: always

    
#---------------------
# gogs
#---------------------  
  gogs:
    image: gogs/gogs:latest
    restart: always
    container_name: gogs
    ports:
      - 2222:2222
    networks: 
      - private
      - web
    volumes:
      - ./data/gogs/data:/data
    depends_on:
      - gogs-db
    labels:
      - traefik.enable=true
      - "traefik.http.routers.gogs.entrypoints=websecure"
      - traefik.http.routers.gogs.rule=Host(`gogs.dsp4-5archio19-ah-je-gh-yb.fr`)
      - traefik.http.services.gogs.loadbalancer.server.port=3000
      - "traefik.http.routers.gogs.tls.certresolver=lets-encr"


#---------------------
# jenkins 
#---------------------

  jenkins:
    build:
      context: .
      dockerfile: jenkins.Dockerfile
    container_name: jenkins
    volumes:
      - ./data/jenkins/jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - $PWD:/app
    user: 0:0
    networks: 
      - private
      - web
    labels:
      - traefik.enable=true
      - "traefik.http.routers.jenkins.entrypoints=websecure"
      - traefik.http.routers.jenkins.rule=Host(`jenkins.dsp4-5archio19-ah-je-gh-yb.fr`)
      - traefik.http.services.jenkins.loadbalancer.server.port=8080
      - "traefik.http.routers.jenkins.tls.certresolver=lets-encr"
      
      
#---------------------
# nexus 
#---------------------
  nexus:
    image: sonatype/nexus3
    networks:
      - private
      - web
    container_name: nexus
    volumes:
      - ./data/nexus-data:/nexus-data
    user: 0:0
    ports:
      - "8081"
    labels:
      - traefik.enable=true
      - "traefik.http.routers.nexus.entrypoints=websecure"
      - traefik.http.routers.nexus.rule=Host(`nexus.dsp4-5archio19-ah-je-gh-yb.fr`)
      - "traefik.http.routers.nexus.tls.certresolver=lets-encr"      
      
      
  prometheus:
    image: quay.io/prometheus/prometheus:v2.0.0
    container_name: prometheus
    volumes:
     - ./prometheus.yml:/etc/prometheus/prometheus.yml
     - ./data/prometheus/:/prometheus/
    command: "--config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus"
    ports:
     - 9090
    user: 0:0
    networks: 
      - private
      - web
    labels:
      - traefik.enable=true
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - traefik.http.routers.prometheus.rule=Host(`prometheus.dsp4-5archio19-ah-je-gh-yb.fr`)
      - "traefik.http.routers.prometheus.tls.certresolver=lets-encr"     
     
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
     - 3000
    user: 0:0
    networks: 
      - private
      - web
    volumes:
      - ./data/grafana/:/var/lib/grafana
      - ./data/grafana/provisioning/:/etc/grafana/provisioning/
    depends_on:
      - prometheus
    labels:
      - traefik.enable=true
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - traefik.http.routers.grafana.rule=Host(`grafana.dsp4-5archio19-ah-je-gh-yb.fr`)
      - "traefik.http.routers.grafana.tls.certresolver=lets-encr"  
      
      
#---------------------
# server monitoring with prometheus
#---------------------      
  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    command:
      - '--path.rootfs=/host'
    network_mode: host
    pid: host
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'   
      
      
#---------------------
#  docker monitoring with prometheus
#---------------------         
  cadvisor:
    image: google/cadvisor:v0.33.0
    container_name: cadvisor
    restart: always
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    labels:
      - traefik.enable=true
      - "traefik.http.routers.cadvisor.entrypoints=websecure"
      - traefik.http.routers.cadvisor.rule=Host(`cadvisor.dsp4-5archio19-ah-je-gh-yb.fr`)
      - "traefik.http.routers.cadvisor.tls.certresolver=lets-encr" 
    networks: 
      - web
      - private
    expose:
      - 8080
      
      
#---------------------
# sonarQube
#---------------------  
  sonarqube:
    image: sonarqube:9.0-community
    container_name: sonarqube
    depends_on:
      - sonarqube-db
    ports:
      - "9000:9000"
    networks:
      - private
      - web
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonarqube-db:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_temp:/opt/sonarqube/temp
    labels:
      - traefik.enable=true
      - "traefik.http.routers.sonarqube.entrypoints=websecure"
      - traefik.http.routers.sonarqube.rule=Host(`sonarqube.dsp4-5archio19-ah-je-gh-yb.fr`)
      - "traefik.http.routers.sonarqube.tls.certresolver=lets-encr" 
      
      
  sonarqube-db:
    container_name: sonarqube-db
    image: postgres
    networks:
      - private
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - POSTGRES_DB=sonar
      
    volumes:
      - postgresql:/var/lib/postgresql
      # This needs explicit mapping due to https://github.com/docker-library/postgres/blob/4e48e3228a30763913ece952c611e5e9b95c8759/Dockerfile.template#L52
      - postgresql_data:/var/lib/postgresql/data



volumes:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  sonarqube_temp:
  postgresql:
  postgresql_data:
